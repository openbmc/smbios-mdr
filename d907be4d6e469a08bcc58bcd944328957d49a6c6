{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a8ff3707_89da8021",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2024-02-13T23:38:41Z",
      "side": 1,
      "message": "Nice! Good cleanup. I was wondering why the order of DIMM was shuffled around on my system to be different from their names. I wouldn\u0027t mind this being the default behavior, but that would be a breaking change, so probably best to leave it as-is.",
      "revId": "d907be4d6e469a08bcc58bcd944328957d49a6c6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ea01674_b8c62832",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2024-02-13T23:43:03Z",
      "side": 1,
      "message": "Conceptual question. What happens if there is more than one object at the same path? With the old way of allocating numbers in sequence, this was impossible. However, with this new way of allocating numbers based on the detected content, it is conceivable that an untrustworthy or buggy SMBIOS table could create more than one DIMM object with exactly the same number. Would this cause the D-Bus call to error out and thus not create the object?",
      "revId": "d907be4d6e469a08bcc58bcd944328957d49a6c6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f11d7266_4362881e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2024-02-13T23:43:29Z",
      "side": 1,
      "message": "(didn\u0027t mean to mark this as Resolved)",
      "parentUuid": "5ea01674_b8c62832",
      "revId": "d907be4d6e469a08bcc58bcd944328957d49a6c6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}