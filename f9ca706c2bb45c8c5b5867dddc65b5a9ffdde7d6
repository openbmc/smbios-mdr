{
  "comments": [
    {
      "key": {
        "uuid": "e0bbf94f_90f33d4f",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 776,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-22T03:20:33Z",
      "side": 1,
      "message": "This check can be moved up or even near to caller of discoverCPUsAndConfigs() instead of keeping it inside this for loop. This is nothing to do with client addr.",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 776,
        "endChar": 9
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5369e651_81f70468",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 776,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-22T20:50:32Z",
      "side": 1,
      "message": "Zhikui had the same comment, so I\u0027m open to changing it. But the point of this check is to cover the narrow window where power goes off and that doesn\u0027t also trigger an underlying PECIError. E.g. say after the last discovery MB command on CPU0, the power goes off while we\u0027re publishing the D-Bus interfaces for cpu0. I want to detect that power loss before starting on CPU1, because otherwise it will just look like CPU1 isn\u0027t populated, and it will be silently ignored.\n\nI admit it\u0027s a small window where the power loss wouldn\u0027t just cause a PECIError to be thrown, but I think it\u0027s worth keeping here. This loop can take minutes to finish in the worst case, so I don\u0027t think it\u0027s unreasonable to check for power state changes inside it.",
      "parentUuid": "e0bbf94f_90f33d4f",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 776,
        "endChar": 9
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fc31e09_4dbfafb4",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 776,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-23T02:54:12Z",
      "side": 1,
      "message": "Yeah, Thanks for explanation. It makes sense to me to keep check inside loop (As is).",
      "parentUuid": "5369e651_81f70468",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 776,
        "endChar": 9
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96a017c6_4ea16c8d",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 786,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-22T03:20:33Z",
      "side": 1,
      "message": "In this case, we need to limit the number of retries. So throw here increments \"peciErrorCount\" counter value",
      "range": {
        "startLine": 785,
        "startChar": 12,
        "endLine": 786,
        "endChar": 44
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "255dbd41_bae3c6f9",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 786,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-22T20:50:32Z",
      "side": 1,
      "message": "I agree, will change.",
      "parentUuid": "96a017c6_4ea16c8d",
      "range": {
        "startLine": 785,
        "startChar": 12,
        "endLine": 786,
        "endChar": 44
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e80ed369_a99a86c0",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 786,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-23T01:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "255dbd41_bae3c6f9",
      "range": {
        "startLine": 785,
        "startChar": 12,
        "endLine": 786,
        "endChar": 44
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5b7320d_ff0797bc",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 861,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-22T03:20:33Z",
      "side": 1,
      "message": "This condition doesn\u0027t holds correct in all times. Example: If PECI command is failed at Line: 789/801, Then we will see cpus empty but returning true here ends up in stopping retry and empty data.",
      "range": {
        "startLine": 860,
        "startChar": 0,
        "endLine": 861,
        "endChar": 16
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb9148ac_4fdd8784",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 861,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-22T20:50:32Z",
      "side": 1,
      "message": "No, that\u0027s the intention of this \"return true\". If the processors don\u0027t exist (ping/CPUID fails), or they don\u0027t support SST, that\u0027s not an error condition - they are intentionally excluded and we can still successfully finish. We only return false if we detect an error condition suggesting discovery couldn\u0027t be completed.",
      "parentUuid": "f5b7320d_ff0797bc",
      "range": {
        "startLine": 860,
        "startChar": 0,
        "endLine": 861,
        "endChar": 16
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac5bca57_dc9284e3",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 861,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-23T02:54:12Z",
      "side": 1,
      "message": "Hmmm, not clear. Do you mean to say empty cpus list also a valid config?\nMy comment is about adding cpuList.empty() check before sending true here.",
      "parentUuid": "eb9148ac_4fdd8784",
      "range": {
        "startLine": 860,
        "startChar": 0,
        "endLine": 861,
        "endChar": 16
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f22e38ff_23deae12",
        "filename": "src/speed_select.cpp",
        "patchSetId": 16
      },
      "lineNbr": 861,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-23T15:29:49Z",
      "side": 1,
      "message": "Yes, finishing with an empty cpu list is valid if there are no CPUs that support SST - we check the processor family and several mailbox commands to make sure the expected SST support is there. If not supported, then there is no reason to retry discovery again so we return true.",
      "parentUuid": "ac5bca57_dc9284e3",
      "range": {
        "startLine": 860,
        "startChar": 0,
        "endLine": 861,
        "endChar": 16
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2ba3b57_fd2d8fb4",
        "filename": "tools/sst-info.sh",
        "patchSetId": 16
      },
      "lineNbr": 126,
      "author": {
        "id": 1000269
      },
      "writtenOn": "2021-03-22T03:20:33Z",
      "side": 1,
      "message": "Add help as well.",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 126,
        "endChar": 31
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfaff2e1_4d3886a9",
        "filename": "tools/sst-info.sh",
        "patchSetId": 16
      },
      "lineNbr": 126,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-23T01:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2ba3b57_fd2d8fb4",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 126,
        "endChar": 31
      },
      "revId": "f9ca706c2bb45c8c5b5867dddc65b5a9ffdde7d6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}